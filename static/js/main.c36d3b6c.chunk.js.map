{"version":3,"sources":["App.js","index.js"],"names":["Timer","displayTime","t","min","parseInt","toString","sec","length","useState","seconds","setSeconds","pause","setPause","breakCounter","setBreakCounter","onBreak","setOnBreak","clicked","setClicked","useEffect","countDown","setTimeout","startWork","startBreak","document","body","style","setBreakTime","className","onClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"mKAGMA,G,KAAQ,WACZ,IAKMC,EAAc,SAACC,GACnB,IAAMC,EAAMC,SAASF,EAAI,IAAIG,WACvBC,GAAOJ,EAAI,IAAIG,WAKrB,OAHkB,IAAfF,EAAII,OAAe,IAAMJ,EAAMA,GAChC,KACgB,IAAfG,EAAIC,OAAe,IAAMD,EAAMA,IAZlB,EAgBYE,mBAfb,MADC,mBAgBXC,EAhBW,KAgBFC,EAhBE,OAiBQF,oBAAS,GAjBjB,mBAiBXG,EAjBW,KAiBJC,EAjBI,OAkBsBJ,mBAAS,GAlB/B,mBAkBXK,EAlBW,KAkBGC,EAlBH,OAmBYN,oBAAS,GAnBrB,mBAmBXO,EAnBW,KAmBFC,EAnBE,OAoBYR,oBAAS,GApBrB,mBAoBXS,EApBW,KAoBFC,EApBE,KAsBlBC,qBAAU,YACPR,GAASS,OAIZ,IAAMA,EAAY,WAChBX,EAAU,EACNY,YAAW,kBAAMX,EAAWD,EAAU,KAAI,MAExCS,GAAW,GACXN,GAAS,GACTC,EAAe,GAAKC,EAAgB,GAC7BC,EAAUO,IAAcC,MAGjCA,EAAa,WACjBT,EAAgBD,EAAe,GAE1BW,SAASC,KAAKC,MADnBb,EAAe,EACY,uBACA,uBAC3BG,GAAW,GACXN,EAAWiB,MAEPL,EAAY,WAChBE,SAASC,KAAKC,MAAQ,uBACtBV,GAAW,GACXN,EA/Ce,OAkDXiB,EAAe,WACnB,OAAOd,EAAe,EAlDD,IACD,KA2GtB,OACE,yBAAKe,UAAU,UArDZX,GACC,4BACEW,UAAU,cACVC,QAAS,WACPnB,EAAW,GACXQ,GAAW,GACXN,GAAS,KALb,QAsDDG,EAtBD,oCACE,yBAAKa,UAAU,iBAAf,gBAA6Cf,GAC7C,4BACGA,GAAgB,EAAI,QAAU,OADjC,UACgDZ,EAAYQ,KAE1DQ,GACA,4BACEY,QAAS,WACPjB,GAAS,GACTM,GAAW,KAHf,gBAvBJ,oCACE,uCAAajB,EAAYQ,KACvBQ,GACA,4BACEY,QAAS,WACPjB,GAAS,GACTM,GAAW,KAHf,kBAmDKY,MAVf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAAlB,kBACA,uBAAGA,UAAU,eAAb,iCACA,kBAAC,EAAD,QC1HNG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,U","file":"static/js/main.c36d3b6c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst Timer = () => {\n  const workTime = 25 * 60;\n  const breakTimeShort = 5 * 60;\n  const breakTimeLong = 15 * 60;\n\n  // parse time\n  const displayTime = (t) => {\n    const min = parseInt(t / 60).toString();\n    const sec = (t % 60).toString();\n    const time =\n      (min.length === 1 ? \"0\" + min : min) +\n      \":\" +\n      (sec.length === 1 ? \"0\" + sec : sec);\n    return time;\n  };\n\n  const [seconds, setSeconds] = useState(workTime);\n  const [pause, setPause] = useState(true);\n  const [breakCounter, setBreakCounter] = useState(3);\n  const [onBreak, setOnBreak] = useState(false);\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    !pause && countDown();\n  });\n\n  // main operating function\n  const countDown = () => {\n    seconds > 0\n      ? setTimeout(() => setSeconds(seconds - 1), 1000)\n      : (() => {\n          setClicked(false);\n          setPause(true);\n          breakCounter > 3 && setBreakCounter(0);\n          return onBreak ? startWork() : startBreak();\n        })();\n  };\n  const startBreak = () => {\n    setBreakCounter(breakCounter + 1);\n    breakCounter < 3\n      ? (document.body.style = \"background: #4598b4;\")\n      : (document.body.style = \"background: #7fc023;\");\n    setOnBreak(true);\n    setSeconds(setBreakTime());\n  };\n  const startWork = () => {\n    document.body.style = \"background: #FF5738;\";\n    setOnBreak(false);\n    setSeconds(workTime);\n  };\n\n  const setBreakTime = () => {\n    return breakCounter < 3 ? breakTimeShort : breakTimeLong;\n  };\n\n  // skips timer seconds to 5\n  const testButton = () => {\n    return (\n      !clicked && (\n        <button\n          className=\"test-button\"\n          onClick={() => {\n            setSeconds(3);\n            setClicked(true);\n            setPause(false);\n          }}\n        >\n          skip\n        </button>\n      )\n    );\n  };\n  const working = () => {\n    return (\n      <>\n        <h2>Working {displayTime(seconds)}</h2>\n        {!clicked && (\n          <button\n            onClick={() => {\n              setPause(false);\n              setClicked(true);\n            }}\n          >\n            Start Work\n          </button>\n        )}\n      </>\n    );\n  };\n  const takingBreak = () => {\n    return (\n      <>\n        <div className=\"break-counter\">break number {breakCounter}</div>\n        <h2>\n          {breakCounter <= 3 ? \"Short\" : \"Long\"} Break {displayTime(seconds)}\n        </h2>\n        {!clicked && (\n          <button\n            onClick={() => {\n              setPause(false);\n              setClicked(true);\n            }}\n          >\n            Start break\n          </button>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"timer\">\n      {testButton()}\n      {onBreak ? takingBreak() : working()}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Pomodoro timer</header>\n      <p className=\"description\">time your work for efficiency</p>\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}